[user]
  name = Peter Cullen
  # email - set on each repo

[core]

[color]
  ui = true

[color "diff-highlight"]
  oldNormal = red bold
  oldHighlight = red bold 52
  newNormal = green bold
  newHighlight = green bold 22

[alias]
  co = checkout
  cs = "!f() { source ~/.extra-fzf; fco; };f"
  ci = commit
  st = status -sb
  br = branch
  hist = log --pretty=format:\"%h %ad [%an] | %C(auto)%s%d\" --date=relative --all
  histt = log --pretty=format:\"%h %ad [%an] | %C(auto)%s%d\" --date=local --all --date-order
  histg = log --pretty=format:\"%h %ad [%an] | %C(auto)%s%d\" --graph --date=relative --all
  type = cat-file -t
  dump = cat-file -p
  skipped = !git ls-files -v | grep ^[a-z]
  skip = !git update-index --assume-unchanged
  unskip = !git update-index --no-assume-unchanged
  histb = log --graph --decorate --oneline --simplify-by-decoration --all
  diffs = diff --staged

  # list branches by commit date
  # branches = for-each-ref --sort=-committerdate --format="%(refname:short) %Cgreen%(authorname) %(authordate:relative)" refs/heads/
  branches = !git for-each-ref --sort=-committerdate --format='%(refname:short) %(color:green)%(authorname) %(color:blue)%(authordate:relative)' refs/heads/ | fzf --ansi

  # dry-run for a merge
  # git dry dev master
  dry = "!f() { git merge-tree `git merge-base $2 $1` $2 $1; }; f"

  # see if there will be any conflicts between branches:
  # git conflicts
  conflicts = "!f() { git merge-tree `git merge-base $2 $1` $2 $1 | grep -A3 'changed in both'; }; f"

  unmerged = !git branch -r --no-merged | grep -v HEAD | xargs -L1 git --no-pager log --pretty=tformat:'%Cgreen%d%Creset - %h by %an (%Cblue%ar%Creset)' -1


[credential]
  helper = osxkeychain

[push]
  default = simple

[difftool "sourcetree"]
	cmd = opendiff \"$LOCAL\" \"$REMOTE\"
	path = 
[mergetool "sourcetree"]
	cmd = /Applications/Sourcetree.app/Contents/Resources/opendiff-w.sh \"$LOCAL\" \"$REMOTE\" -ancestor \"$BASE\" -merge \"$MERGED\"
	trustExitCode = true
[commit]
	template = /Users/pcullen/.stCommitMsg
[tag]
	sort = version:refname
[filter "lfs"]
	process = git-lfs filter-process
	required = true
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
